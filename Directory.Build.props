<Project InitialTargets="VerifyBuildProps">
  <!-- See: https://docs.microsoft.com/en-us/visualstudio/msbuild/customize-your-build?view=vs-2019#directorybuildprops-and-directorybuildtargets -->
  <PropertyGroup>
    <IsOfficialBuild Condition="'$(IsOfficialBuild)' == ''">false</IsOfficialBuild>

    <!-- Because the default value in MSBuild doesn't get set until after Directory.Build.props, and we need it, we set the default here. -->
    <Configuration Condition="'$(Configuration)' == ''">Debug</Configuration>
  </PropertyGroup>

  <PropertyGroup Label="Build layout">
    <RepoRoot>$(MSBuildThisFileDirectory)</RepoRoot>
    <RepoBuildExtensions>$(RepoRoot)build\extensions\</RepoBuildExtensions>
    <SrcRoot>$(RepoRoot)src\</SrcRoot>
    <!-- While the semantics are different, for backwards compatibility, this is different than our custom $(DropRootDirectory) defined in Common.props. namely, it includes the final backslash, per convention. -->
    <DropRootDirectory Condition="'$(DropRootDirectory)' == ''">$(RepoRoot)</DropRootDirectory>

    <!-- Latest MSBuild tools uses the $(BaseOutputPath) and $(OutputPath) properties. Legacy properties are set based on them in Microsoft.Common.targets.
    By default, we configure the BaseOutputPath to the drop folder. Other adaptations to the final OutputPath can be done after this occurs.
    -->
    <BaseOutputPath>$(DropRootDirectory)bin\$(Configuration)\$(MSBuildProjectName)\</BaseOutputPath>
    <!--
    Since we won't know the target framework folder (if applicable) when this file gets evaluated, we can't set
    the OutputPath correctly here. In general, this should be done in a Directory.Build.targets if needed.
    But it's preferrable to only change the BaseOutputPath and let the OutputPath be computed by standard MSBuild props/targets.
      <OutputPath>$(BaseOutputPath)\$(TargetFramework)\</OutputPath> -->
    <!-- Force empty, so SDK will compute relative to the BaseOutputPath. It will also allow binlog to identify any locations where this gets changed. (the first set of a property isn't reported) -->
    <OutputPath></OutputPath>

    <!-- Save packages outside of the project's bin folder and into a central location to simplify actions on them. e.g. signing
    <PackageOutputPath>$(DropRootDirectory)package\signed\$(Configuration)\</PackageOutputPath>-->
  </PropertyGroup>

  <PropertyGroup Label="Official build defaults" Condition="'$(IsOfficialBuild)' == 'true'">
    <Enable_Telemetry>true</Enable_Telemetry>
  </PropertyGroup>

  <!-- Use our dev nuget config when requested. -->
  <PropertyGroup Label="Dev Nuget config" Condition="'$(UseNugetDevConfig)' == 'true' and '$(IsOfficialBuild)' != 'true'">
    <RestoreConfigFile Condition="'$(RestoreConfigFile)' == ''">$(RepoRoot)nuget.dev.config</RestoreConfigFile>

    <!-- since we're using dev nuget packages, lets prevent dirtying up the local nuget cache folder -->
    <RestorePackagesPath>$(RepoRoot)obj\.nuget-cache</RestorePackagesPath>
  </PropertyGroup>

  <Target Name="VerifyBuildProps">
    <Error Condition="'$(isOfficialBuild)' == 'true' and '$(UseNugetDevConfig)' == 'true'"
           Text="UseNugetDevConfig cannot be set for official builds." />
    <Error Condition="'$(isOfficialBuild)' == 'true' and '$(PublishToDevNugetFeed)' == 'true'"
           Text="PublishToDevNugetFeed cannot be set for official builds." />

    <Error Condition="('$(UseNugetDevConfig)' == 'true' or '$(PublishToDevNugetFeed)' == 'true') and '$(NUGET_LOCAL_DEV_PACKAGES)' == ''"
           Text="The environment variable 'NUGET_LOCAL_DEV_PACKAGES' is not set. This is required to use any of the arguments: UseNugetDevConfig, PublishToDevNugetFeed" />
    <Error Condition="'$(NUGET_LOCAL_DEV_PACKAGES)' != '' and !Exists('$(NUGET_LOCAL_DEV_PACKAGES)')"
           Text="The environment variable 'NUGET_LOCAL_DEV_PACKAGES' is set, but does not exist. Ensure it exists if specified." />
  </Target>
</Project>
